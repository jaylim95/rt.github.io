---
title: "Visualizing the Data"
execute:
  echo: false

---

## Visualization

[Fill description]{style="color:red;"}.


## Univariate: Categorial Variables


[Fill description]{style="color:red;"}.

::: {.callout-tip appearance="simple"}
Select a categorical column to visualize:
```{ojs}
data = FileAttachment("cleaned_dataset.csv").csv({ typed: true })
cat_columns = ['patient_cohort', 'diagnosis', 'sex']
viewof selected_column_cat = Inputs.radio(cat_columns, {value: cat_columns[0]})
```
:::


```{ojs}
grouped_data = d3.groups(data, d => d[selected_column_cat]).map(([key, values]) => ({key, count: values.length}));

Plot.plot({
  marks: [
    Plot.barY(grouped_data, {x: "key", y: "count", fill: "steelblue"}),
    Plot.text(grouped_data, {x: "key", y: "count", text: d => d.count, dy: -10})
  ],
  x: {
    label: selected_column_cat
  },
  y: {
    label: "Count"
  },
  color: {
    legend: false
  }
})
```


### What did you observe?

::: {.callout-note collapse="true" appearance="simple"}

## What did you observe about patient cohort and sex?

We see that they are approximately equal amount of female and males, and even though cohort 1 has more patients than cohort 2, there are approximately similar!

:::

::: {.callout-note collapse="true" appearance="simple"}

## What did you observe about diagnosis (target variable)?

 We see that around 400 patients who does not have cancers, while only approximately 180 patients have cancers! That implies only approximately 30% of our data is pancreatic cancer patients!
 
 **Brain teaser: What impact it might have? **
 
*Hint: Think about evalaution metrics, and whether it is enough information to train a classifiers!*

:::

## Univariate: Continuous Variables

[Fill description]{style="color:red;"}.


::: {.callout-tip appearance="simple"}
Select a continuous column to visualize:
```{ojs}
cont_columns = ['age', 'LYVE1', 'REG1B', 'TFF1', 'REG1A', 'creatinine', 'plasma_CA19_9']
viewof selected_column = Inputs.radio(cont_columns, {value: 'LYVE1'})
viewof bin_count = Inputs.range([1, 50], {step: 1, value: 15, label: "Number of Bins"})

```
:::


```{ojs}
Plot.plot({
  marks: [
    Plot.rectY(data, Plot.binX({y: "count"}, {x: selected_column, fill: "steelblue", thresholds: bin_count}))
  ],
  x: {
    label: selected_column
  },
  y: {
    label: "Count"
  },
  color: {
    legend: false
  }
})
```

[Fill thoughts]{style="color:red;"}.

## Bivariate: Categorial Variables

[Fill description]{style="color:red;"}.

::: {.callout-tip appearance="simple"}
Select a column to compare against diagnosis:
```{ojs}
bivariate_cat_columns = ['sex', 'patient_cohort']
viewof selected_bivariate_cat_column = Inputs.radio(bivariate_cat_columns, {value: bivariate_cat_columns[0]})
```
:::

```{ojs}
function calculateGroupedPercentages(data, groupColumn, stackColumn) {
  const grouped = d3.rollup(data, v => v.length, d => d[groupColumn], d => d[stackColumn]);
  const totals = d3.rollup(data, v => v.length, d => d[groupColumn]);

  return Array.from(grouped, ([key, values]) => {
    const total = totals.get(key);
    return Array.from(values, ([stackKey, count]) => ({
      group: key,
      stack: stackKey,
      count,
      percentage: (count / total) * 100
    }));
  }).flat();
}

grouped_bivariate_data = calculateGroupedPercentages(data, "diagnosis", selected_bivariate_cat_column);

Plot.plot({
  marks: [
    Plot.barY(grouped_bivariate_data, {
      x: d => d.group + ":" + d.stack,
      y: "percentage",
      fill: "stack",
      title: d => `${d.stack}: ${d.percentage.toFixed(1)}%`
    }),
    Plot.text(grouped_bivariate_data, {
      x: d => d.group + ":" + d.stack,
      y: d => d.percentage,
      text: d => `${d.percentage.toFixed(1)}%`,
      dy: -4
    })
  ],
  x: {
    label: "Diagnosis",
    domain: Array.from(new Set(grouped_bivariate_data.map(d => d.group + ":" + d.stack))),
    tickFormat: d => d.split(":")[0] // Format ticks to show only the group
  },
  y: {
    label: "Percentage"
  },
  color: {
    legend: true
  }
})

```

### What did you observe?

[Fill thoughts]{style="color:red;"}.



## Bivariate: Continuous Variables

[Fill description about heatmap]{style="color:red;"}.


::: {.callout-tip appearance="simple"}
Select Continuous Variables for Correlation Heatmap:
```{ojs}
bivariate_cont_columns = ['age', 'LYVE1', 'REG1B', 'TFF1', 'REG1A', 'creatinine', 'plasma_CA19_9']
viewof selected_bivariate_cont_columns = Inputs.checkbox(bivariate_cont_columns, {value: bivariate_cont_columns})
```
:::


```{ojs}
function calculateCorrelationMatrix(data, selectedColumns) {
  const n = selectedColumns.length;
  const correlationMatrix = Array.from({ length: n }, () => Array(n).fill(0));

  function pearsonCorrelation(x, y) {
    const meanX = d3.mean(x);
    const meanY = d3.mean(y);
    const diffX = x.map(d => d - meanX);
    const diffY = y.map(d => d - meanY);
    const numerator = d3.sum(diffX.map((d, i) => d * diffY[i]));
    const denominator = Math.sqrt(d3.sum(diffX.map(d => d * d)) * d3.sum(diffY.map(d => d * d)));
    return numerator / denominator;
  }

  for (let i = 0; i < n; i++) {
    for (let j = 0; j < n; j++) {
      const col1 = selectedColumns[i];
      const col2 = selectedColumns[j];
      const values1 = data.map(d => d[col1]);
      const values2 = data.map(d => d[col2]);
      const correlation = pearsonCorrelation(values1, values2);
      correlationMatrix[i][j] = correlation;
    }
  }

  return correlationMatrix;
}

correlation_matrix = calculateCorrelationMatrix(data, selected_bivariate_cont_columns);
correlation_data = selected_bivariate_cont_columns.flatMap((col1, i) =>
  selected_bivariate_cont_columns.map((col2, j) => ({
    x: col1,
    y: col2,
    value: correlation_matrix[i][j]
  }))
);

Plot.plot({
  marks: [
    Plot.cell(correlation_data, {x: "x", y: "y", fill: "value", title: d => d.value.toFixed(2)}),
    Plot.text(correlation_data, {x: "x", y: "y", text: d => d.value.toFixed(2), dy: 0, textAnchor: "middle"})
  ],
  x: {
    domain: selected_bivariate_cont_columns,
    label: "Variables"
  },
  y: {
    domain: selected_bivariate_cont_columns,
    label: "Variables"
  },
  color: {
    type: "linear",
    scheme: "blues",
    label: "Correlation"
  },
  width: 600,
  height: 600
})


```

### Try to match it on a scatterplot!

::: {.callout-tip appearance="simple"}

Select a X-Axis and Y-Axis Column:

```{ojs}
viewof x_column = Inputs.radio(bivariate_cont_columns, {value: 'age'})
viewof y_column = Inputs.radio(bivariate_cont_columns, {value: 'LYVE1'})
Plot.plot({
  marks: [
    Plot.dot(data, {x: x_column, y: y_column, fill: "steelblue"})
  ],
  x: {
    label: x_column
  },
  y: {
    label: y_column
  },
  color: {
    legend: false
  }
})
```

### What did you observe?

[Fill thoughts]{style="color:red;"}.


$\,$
